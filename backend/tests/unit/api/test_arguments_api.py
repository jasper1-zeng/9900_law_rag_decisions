"""
Tests for the arguments API endpoints.

This file contains tests for the legal arguments API routes.
"""
import sys
import os
import json
import pytest
from unittest.mock import patch, AsyncMock, MagicMock, Mock

# Add the parent directory to the path so we can import the app modules
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))))

# Import the schemas directly - we'll mock the rest
from app.api.schemas.arguments import BuildArgumentsRequest, BuildArgumentsResponse, RelatedCase


class TestArgumentsAPI:
    """Tests for the arguments API routes."""
    
    @patch('app.api.routes.arguments.build_arguments_service')
    def test_build_arguments_endpoint(self, mock_build_arguments):
        """Test the POST /api/arguments/build endpoint."""
        # Setup mock
        related_cases = [
            RelatedCase(
                title="Test Case 1",
                url="https://example.com/case1",
                summary="This is a test case summary",
                citation_number="2023 SAT 123",
                similarity_score=0.85
            )
        ]
        
        # Create mock response
        mock_response = BuildArgumentsResponse(
            conversation_id="test_arg_id",
            disclaimer="DISCLAIMER: Analysis generated by Test Model. For informational purposes only.",
            related_cases=related_cases,
            raw_content="This is the legal analysis and arguments based on the provided case."
        )
        
        # Setup the async mock
        mock_build_arguments.return_value = AsyncMock(return_value=mock_response)
        
        # Prepare request data
        request_data = BuildArgumentsRequest(
            case_content="The tenant claims the landlord failed to maintain the property.",
            case_title="Smith v. Johnson",
            case_topic="Commercial Tenancy",
            use_single_call=True,
            conversation_id=None,
            llm_model="gpt-4o"
        )
        
        # Verify request is properly constructed
        assert request_data.case_content == "The tenant claims the landlord failed to maintain the property."
        assert request_data.case_title == "Smith v. Johnson"
        
        # Assert response fields individually instead of comparing dictionaries
        assert mock_response.conversation_id == "test_arg_id"
        assert mock_response.disclaimer == "DISCLAIMER: Analysis generated by Test Model. For informational purposes only."
        assert len(mock_response.related_cases) == 1
        assert mock_response.related_cases[0].title == "Test Case 1"
        assert mock_response.related_cases[0].url == "https://example.com/case1"
        assert mock_response.related_cases[0].similarity_score == 0.85
        assert mock_response.raw_content == "This is the legal analysis and arguments based on the provided case."
    
    def test_build_arguments_with_existing_conversation(self):
        """Test arguments endpoint with an existing conversation ID."""
        # Create related cases
        related_cases = [
            RelatedCase(
                title="Related Test Case",
                url="https://example.com/case2",
                summary="This is a related case summary",
                citation_number="2023 SAT 124",
                similarity_score=0.78
            )
        ]
        
        # Create mock response
        mock_response = BuildArgumentsResponse(
            conversation_id="existing_arg_id",
            disclaimer="DISCLAIMER: Analysis generated by Test Model. For informational purposes only.",
            related_cases=related_cases,
            raw_content="This is the follow-up legal analysis for the existing conversation."
        )
        
        # Prepare request data with conversation_id
        request_data = BuildArgumentsRequest(
            case_content="Additional facts: The lease agreement specifically mentioned maintenance obligations.",
            case_title="Smith v. Johnson (continued)",
            case_topic="Commercial Tenancy",
            use_single_call=True,
            conversation_id="existing_arg_id"
        )
        
        # Assert request parameter is correctly set
        assert request_data.conversation_id == "existing_arg_id"
        assert request_data.case_content == "Additional facts: The lease agreement specifically mentioned maintenance obligations."
    
    def test_arguments_validation(self):
        """Test argument request schema validation."""
        # Test with missing required field
        with pytest.raises(ValueError):
            # Missing case_content which is required
            BuildArgumentsRequest(
                case_title="Smith v. Johnson",
                case_topic="Commercial Tenancy"
            )
        
        # Test with valid data
        valid_request = BuildArgumentsRequest(
            case_content="Valid content",
            case_title="Smith v. Johnson",
            case_topic="Commercial Tenancy"
        )
        
        # Assert valid request properly validates
        assert valid_request.case_content == "Valid content"
        assert valid_request.case_title == "Smith v. Johnson"


if __name__ == "__main__":
    pytest.main(["-xvs", __file__]) 